You are a Manim expert.
Given a structured scene description for a math animation, your task is to:

Plan: Think through the animation step-by-step based on the provided description.

What objects or text need to be created?
How should they be arranged and animated?
What durations are given for each step?


Code: After planning, write complete and executable Python code using the Manim library to implement the animation.

Critical Syntax Rules:

✅ Complete all lines - every parenthesis, bracket, and quote must be closed
✅ Test each line - ensure proper syntax before moving to the next
✅ Use proper positioning - choose the right positioning method for each object type

Instructions:

Use standard Manim constructs (Scene, MathTex, Square, Arrow, Line, Polygon, etc.).
Use .wait(seconds) for timing transitions and static scenes.
⚠️ Use MathTex(...) for all text and math.

For plain words like "Base" or "Angle", wrap them in \text{...}, e.g. MathTex(r"\text{Base}").
Do not use Tex(...) unless rendering a full LaTeX block with \begin{...} or similar.



Positioning Guidelines:

For Rectangle/Square objects: Use get_corner() method

rectangle.get_corner(UL), rectangle.get_corner(UR), etc.


For Polygon/Triangle objects: Use get_vertices() method

triangle.get_vertices()[0] (first vertex), triangle.get_vertices()[1] (second vertex), etc.
NEVER use get_corner() with Polygon objects - it will cause errors


For general positioning: Use next_to(object, direction, buff=0.1)
Always include buff=0.1 parameter for proper spacing

Formatting Rules:

Output only one code block.
Start and end the code block with triple single quotes: '''
Do not include any explanation, planning, or commentary outside the code block.
Double-check syntax - every line must be complete and valid Python.

Six Example Outputs:
Example 1 (single static state):
'''
from manim import *
class SimpleTriangle(Scene):
def construct(self):
triangle = Triangle()
self.play(Create(triangle))
self.wait(2)
'''
Example 2 (static + one animation):
'''
from manim import *
class HighlightEquation(Scene):
def construct(self):
eq = MathTex("E=mc^2")
self.add(eq)
self.wait(1)
self.play(eq.animate.set_color(YELLOW), run_time=2)
self.wait(1)
'''
Example 3 (static + two animations with proper labeling):
'''
from manim import *
class LabeledTriangle(Scene):
def construct(self):
triangle = Triangle()
base_label = MathTex(r"\text{base}").next_to(triangle, DOWN, buff=0.1)
self.add(triangle, base_label)
self.wait(1)
# Animation 1: highlight triangle
self.play(triangle.animate.set_color(YELLOW), run_time=2)
self.wait(1)
# Animation 2: highlight label
self.play(base_label.animate.set_color(RED), run_time=2)
self.wait(1)
'''
Example 4 (static + three animations):
'''
from manim import *
class NumberLineExample(Scene):
def construct(self):
line = NumberLine(x_range=[0, 5, 1])
dot = Dot(color=RED).move_to(line.n2p(0))
self.add(line, dot)
self.wait(1)
# Animation 1: move to 2
self.play(dot.animate.move_to(line.n2p(2)), run_time=2)
self.wait(0.5)
# Animation 2: move to 4
self.play(dot.animate.move_to(line.n2p(4)), run_time=2)
self.wait(0.5)
# Animation 3: change color
self.play(dot.animate.set_color(BLUE), run_time=1)
self.wait(1)
'''
Example 5 (isosceles triangle with proper vertex positioning):
'''
from manim import *
class IsoscelesTriangleProperties(Scene):
def construct(self):
# Create isosceles triangle using Polygon
triangle = Polygon(
np.array([-1.5, -1, 0]),  # bottom left vertex (index 0)
np.array([0, 1.5, 0]),    # top vertex (index 1)
np.array([1.5, -1, 0])    # bottom right vertex (index 2)
)
    # Label the sides using get_vertices() for Polygon objects
    leg1_label = MathTex(r"\text{leg}").move_to(
        (triangle.get_vertices()[0] + triangle.get_vertices()[1]) / 2
    ).shift(LEFT * 0.3)
    leg2_label = MathTex(r"\text{leg}").move_to(
        (triangle.get_vertices()[1] + triangle.get_vertices()[2]) / 2
    ).shift(RIGHT * 0.3)
    base_label = MathTex(r"\text{base}").next_to(triangle, DOWN, buff=0.1)
    
    self.add(triangle, leg1_label, leg2_label, base_label)
    self.wait(3)
    
    # Animation 1: highlight equal sides
    self.play(
        leg1_label.animate.set_color(YELLOW),
        leg2_label.animate.set_color(YELLOW),
        run_time=2
    )
    self.wait(2)
'''
Example 6 (rectangle with proper corner positioning):
'''
from manim import *
class RectangleExample(Scene):
def construct(self):
# Create rectangle using Rectangle (can use get_corner)
rect = Rectangle(width=3, height=2)
    # Label corners using get_corner() for Rectangle objects
    ul_label = MathTex(r"\text{UL}").next_to(rect.get_corner(UL), UL, buff=0.1)
    ur_label = MathTex(r"\text{UR}").next_to(rect.get_corner(UR), UR, buff=0.1)
    dl_label = MathTex(r"\text{DL}").next_to(rect.get_corner(DL), DL, buff=0.1)
    dr_label = MathTex(r"\text{DR}").next_to(rect.get_corner(DR), DR, buff=0.1)
    
    self.add(rect, ul_label, ur_label, dl_label, dr_label)
    self.wait(2)
'''

*** TIMING SYNCHRONIZATION EXAMPLES ***

Example 7 (synchronized timing with multiple segments):
'''
from manim import *
class SynchronizedExample(Scene):
    def construct(self):
        # Narration Segment 1 [0.0s - 2.4s] - MUST wait exactly 2.4s
        title = Text("Introduction")
        self.add(title)
        self.wait(2.4)  # MANDATORY - matches segment 1 duration
        
        # Narration Segment 2 [2.4s - 7.2s] - MUST wait exactly 4.8s  
        equation = MathTex("E=mc^2")
        self.play(Write(equation), run_time=2.0)
        self.wait(4.8)  # MANDATORY - matches segment 2 duration
        
        # Narration Segment 3 [7.2s - 13.2s] - MUST wait exactly 6.0s
        explanation = Text("Energy equals mass times speed of light squared")
        self.play(Write(explanation), run_time=3.0)
        self.wait(6.0)  # MANDATORY - matches segment 3 duration
'''

Example 8 (complex scene with exact timing):
'''
from manim import *
class ComplexSynchronized(Scene):
    def construct(self):
        # Narration Segment 1 [0.0s - 3.2s] - MUST wait exactly 3.2s
        circle = Circle()
        triangle = Triangle()
        self.play(Create(circle), Create(triangle), run_time=2.0)
        self.wait(3.2)  # MANDATORY - exactly 3.2 seconds
        
        # Narration Segment 2 [3.2s - 8.4s] - MUST wait exactly 5.2s
        square = Square()
        self.play(Transform(circle, square), run_time=1.5)
        self.wait(5.2)  # MANDATORY - exactly 5.2 seconds
        
        # Narration Segment 3 [8.4s - 12.4s] - MUST wait exactly 4.0s
        final_text = Text("Shapes")
        self.play(Write(final_text), run_time=1.0)
        self.wait(4.0)  # MANDATORY - exactly 4.0 seconds
'''

*** END OF TIMING EXAMPLES ***

*** END OF EXAMPLES ***

CRITICAL REMINDERS:

Polygon objects: Use get_vertices()[index] for vertex positioning
Rectangle/Square objects: Use get_corner(direction) for corner positioning
Every line must be syntactically complete with proper parentheses and commas
Always test positioning methods match the object type

Now write the code for the following scene:
```text
{scene_description_here}


**CRITICAL ERROR PREVENTION RULES:**

**CRITICAL ERROR PREVENTION RULES:**

Use Text() instead of MathTex() for simple text labels, symbols (+, ×, ÷, =), coordinate labels like "(x₁, y₁)", component labels like "a: initial amount", basic expressions like "a²+b²=c²", degree symbols, and Greek letter labels to avoid LaTeX compilation errors.
Reserve MathTex() only for complex mathematical expressions requiring LaTeX formatting.
Always use raw strings (r"") for MathTex to prevent escape character issues.
For degree symbols use Text("60°") OR MathTex(r"60^{\circ}") OR MathTex(r"60^{\\circ}") but NEVER MathTex(r"60°") or MathTex("60°").
For subscripts wrap in curly braces: y_{2}, x_{1}, m_{1} not y_2, x_1, m_1 especially for multi-character subscripts. Use double backslashes for subscripts: MathTex(r"m = \\frac{y_2 - y_1}{x_2 - x_1}") OR proper braces MathTex(r"m = \frac{y_{2} - y_{1}}{x_{2} - x_{1}}").
For superscripts use curly braces: a^{2}, b^{2}, x^{2} not a^2, b^2, x^2.
Use double backslashes for ALL LaTeX commands: \\frac, \\sqrt, \\pm, \\pi, \\circ, \\cdot, \\text instead of single backslashes \frac, \sqrt, \pm, \pi, \circ, \cdot, \text.
For text within math formulas use separate Text() objects positioned with .next_to() instead of \\text{} commands, OR use \\text{} (double backslash) instead of \text{}, OR use \mathrm{} instead of \text{}, OR replace \text{Area}, \text{base}, \text{height} with separate Text objects.
For Greek letters use Text() for simple cases OR MathTex(r"$\alpha$") with dollar signs for math mode OR ensure proper LaTeX syntax.
For variables in math mode use proper spacing: MathTex(r"C = 2\pi \cdot r") not MathTex(r"C = 2\pi r"). Add \cdot for multiplication.
For complex expressions use math mode delimiters MathTex(r"$expression$") when needed OR wrap in double braces MathTex(r"{{expression}}") for LaTeX grouping.
For exponents with multiplication use MathTex(r"y = a \cdot b^{x}") with proper braces around exponents like b^{x} not b^x.
When LaTeX errors occur try these in order: 1) tex_template = TexTemplate(); tex_template.add_to_preamble(r"\\usepackage{amsmath,amssymb}") and pass tex_template=tex_template to MathTex, 2) break complex expressions into simpler MathTex components, 3) add math mode delimiters, 4) remove tex_template entirely and use default settings, 5) use config.tex_template.add_to_preamble(r"\\usepackage{amsmath}") at start of construct().
For logarithmic notation always import amsmath package OR use simpler syntax without special commands.
Use double braces MathTex(r"{{expression}}") for LaTeX grouping when needed but remove double braces unless using color mapping. Sometimes use MathTex(r"{{4x^2 + 8x}}") instead of MathTex(r"4x^2 + 8x").
For fractions and square roots use proper LaTeX syntax: MathTex(r"\\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}") with double backslashes and consider breaking into simpler parts if compilation fails.
For NumberLine with decimals add label_constructor=Text parameter: NumberLine(x_range=[0, 1, 0.1], label_constructor=Text).
For Sector objects use radius parameter only, not outer_radius. Replace Sector(outer_radius=2, inner_radius=0, ...) with Sector(radius=2, ...).
CRITICAL VGroup Error: Only VMobject types can be added to VGroup. If you get "TypeError: Only values of type VMobject can be added as submobjects of VGroup, but the value Mobject (at index 0 of parameter 7) is of type Mobject. You can try adding this value into a Group instead" then use Group instead of VGroup for mixed object types. VGroup is only for VMobjects, Group accepts any Mobject types.
For quadratic formula use proper escaping: MathTex(r"x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}") with double backslashes for all LaTeX commands.
Always test MathTex rendering first with simple syntax and use Text() fallbacks for simple expressions when LaTeX compilation fails.
Test simple syntax first and avoid mixing \\text{} with complex math in single MathTex objects. Break complex formulas into multiple simpler MathTex components when needed.
For pi symbol use \\pi instead of \pi and ensure all mathematical expressions are properly formatted for LaTeX compilation.


**CRITICAL TIMING SYNCHRONIZATION REQUIREMENTS:**

⚠️ **FOR CLAUDE: This is a mandatory timing synchronization task** ⚠️

When the scene description contains timing segments like:
```
Narration Segment 1 [0.0s - 2.4s]:
Audio: "Some narration text"  
Wait duration: 2.4s

Narration Segment 2 [2.4s - 7.2s]:
Audio: "More narration text"
Wait duration: 4.8s
```

You MUST structure your code exactly like this:

```python
from manim import *
class SceneName(Scene):
    def construct(self):
        # Segment 1 content
        # ... your animations here ...
        self.wait(2.4)  # Extract 2.4 from "Wait duration: 2.4s"
        
        # Segment 2 content  
        # ... your animations here ...
        self.wait(4.8)  # Extract 4.8 from "Wait duration: 4.8s"
        
        # Continue for each segment...
```

**MANDATORY RULES FOR CLAUDE:**

1. **Count the segments**: If there are 3 narration segments, you must have exactly 3 `self.wait()` calls
2. **Extract exact durations**: Find each "Wait duration: X.Xs" and use that exact number
3. **Never use zero**: `self.wait(0)` breaks synchronization - always use the specified duration
4. **One wait per segment**: Each narration segment gets exactly one `self.wait()` call at the end

**Step-by-step process:**
1. Count narration segments: "Narration Segment 1", "Narration Segment 2", etc.
2. For each segment, find "Wait duration: X.Xs" 
3. Add `self.wait(X.X)` using that exact number
4. Verify: number of segments = number of wait calls

**Examples of correct timing extraction:**
- "Wait duration: 2.4s" → `self.wait(2.4)`
- "Wait duration: 4.8s" → `self.wait(4.8)` 
- "Wait duration: 6.0s" → `self.wait(6.0)`
- "Wait duration: 3.2s" → `self.wait(3.2)`

**Claude: Please confirm you understand by always using the exact durations specified in "Wait duration: X.Xs" and never using `self.wait(0)` when timing segments are provided.**

**TIMING VERIFICATION CHECKLIST:**
Before finalizing your code, verify:
- [ ] Number of `self.wait()` calls = Number of narration segments
- [ ] Each wait duration matches exactly: "Wait duration: 2.4s" → `self.wait(2.4)`
- [ ] No `self.wait(0)` calls when timing is specified
- [ ] Every segment has exactly one wait call

**Example with 3 segments:**
```python
from manim import *
class Example(Scene):
    def construct(self):
        # Segment 1 [0.0s - 2.4s]: "Wait duration: 2.4s"
        obj1 = Circle()
        self.add(obj1)
        self.wait(2.4)  # ✅ Extracted from "Wait duration: 2.4s"
        
        # Segment 2 [2.4s - 7.2s]: "Wait duration: 4.8s"  
        obj2 = Square()
        self.play(Create(obj2))
        self.wait(4.8)  # ✅ Extracted from "Wait duration: 4.8s"
        
        # Segment 3 [7.2s - 13.2s]: "Wait duration: 6.0s"
        obj3 = Triangle()
        self.play(Transform(obj2, obj3))
        self.wait(6.0)  # ✅ Extracted from "Wait duration: 6.0s"
        
        # Result: 3 segments = 3 wait calls with exact timing ✅
```

**This timing synchronization is essential for matching audio narration with visual content. Please follow these rules precisely.**

**ABSOLUTELY CRITICAL TIMING RULES:**

🚨 **NEVER use `self.wait(0)` when timing segments are provided!** 🚨

When you see "🚨 MANDATORY: End this segment with self.wait(X.X) 🚨" in the scene description:
1. **ALWAYS** use `self.wait(X.X)` with the EXACT number
2. **NEVER** use `self.wait(0)`, `self.wait(1)`, or any other number
3. **NEVER** skip the wait call for any segment

**WRONG Examples (DO NOT DO THIS):**
```python
self.wait(0)      # ❌ WRONG - ignores timing
self.wait(1)      # ❌ WRONG - arbitrary timing  
self.wait(2)      # ❌ WRONG - doesn't match segment
# Missing wait    # ❌ WRONG - no wait call
```

**CORRECT Examples:**
```python
self.wait(2.4)    # ✅ CORRECT - matches "🚨 MANDATORY: End this segment with self.wait(2.4) 🚨"
self.wait(4.8)    # ✅ CORRECT - matches "🚨 MANDATORY: End this segment with self.wait(4.8) 🚨"
self.wait(6.0)    # ✅ CORRECT - matches "🚨 MANDATORY: End this segment with self.wait(6.0) 🚨"
```

**TIMING EXTRACTION RULE:**
Look for "🚨 MANDATORY: End this segment with self.wait(X.X) 🚨" and use that EXACT number

Example:
- See "🚨 MANDATORY: End this segment with self.wait(2.4) 🚨" → Use `self.wait(2.4)`
- See "🚨 MANDATORY: End this segment with self.wait(4.8) 🚨" → Use `self.wait(4.8)`
- See "🚨 MANDATORY: End this segment with self.wait(6.0) 🚨" → Use `self.wait(6.0)`

**NEVER use arbitrary wait times when timing markers are provided!**