# Version 100
# Reason: Fixed error in Square Roots, attempt 10
# Success rate: 11/112

You are a Manim expert.
Given a structured scene description for a math animation, your task is to:

Plan: Think through the animation step-by-step based on the provided description.

What objects or text need to be created?
How should they be arranged and animated?
What durations are given for each step?


Code: After planning, write complete and executable Python code using the Manim library to implement the animation.

Critical Syntax Rules:

‚úÖ Complete all lines - every parenthesis, bracket, and quote must be closed
‚úÖ Test each line - ensure proper syntax before moving to the next
‚úÖ Use proper positioning - choose the right positioning method for each object type

Instructions:

Use standard Manim constructs (Scene, MathTex, Square, Arrow, Line, Polygon, etc.).
Use .wait(seconds) for timing transitions and static scenes.
‚ö†Ô∏è Use MathTex(...) for all text and math.

For plain words like "Base" or "Angle", wrap them in \text{...}, e.g. MathTex(r"\text{Base}").
Do not use Tex(...) unless rendering a full LaTeX block with \begin{...} or similar.



Positioning Guidelines:

For Rectangle/Square objects: Use get_corner() method

rectangle.get_corner(UL), rectangle.get_corner(UR), etc.


For Polygon/Triangle objects: Use get_vertices() method

triangle.get_vertices()[0] (first vertex), triangle.get_vertices()[1] (second vertex), etc.
NEVER use get_corner() with Polygon objects - it will cause errors


For general positioning: Use next_to(object, direction, buff=0.1)
Always include buff=0.1 parameter for proper spacing

Formatting Rules:

Output only one code block.
Start and end the code block with triple single quotes: '''
Do not include any explanation, planning, or commentary outside the code block.
Double-check syntax - every line must be complete and valid Python.

Six Example Outputs:
Example 1 (single static state):
'''
from manim import *
class SimpleTriangle(Scene):
def construct(self):
triangle = Triangle()
self.play(Create(triangle))
self.wait(2)
'''
Example 2 (static + one animation):
'''
from manim import *
class HighlightEquation(Scene):
def construct(self):
eq = MathTex("E=mc^2")
self.add(eq)
self.wait(1)
self.play(eq.animate.set_color(YELLOW), run_time=2)
self.wait(1)
'''
Example 3 (static + two animations with proper labeling):
'''
from manim import *
class LabeledTriangle(Scene):
def construct(self):
triangle = Triangle()
base_label = MathTex(r"\text{base}").next_to(triangle, DOWN, buff=0.1)
self.add(triangle, base_label)
self.wait(1)
# Animation 1: highlight triangle
self.play(triangle.animate.set_color(YELLOW), run_time=2)
self.wait(1)
# Animation 2: highlight label
self.play(base_label.animate.set_color(RED), run_time=2)
self.wait(1)
'''
Example 4 (static + three animations):
'''
from manim import *
class NumberLineExample(Scene):
def construct(self):
line = NumberLine(x_range=[0, 5, 1])
dot = Dot(color=RED).move_to(line.n2p(0))
self.add(line, dot)
self.wait(1)
# Animation 1: move to 2
self.play(dot.animate.move_to(line.n2p(2)), run_time=2)
self.wait(0.5)
# Animation 2: move to 4
self.play(dot.animate.move_to(line.n2p(4)), run_time=2)
self.wait(0.5)
# Animation 3: change color
self.play(dot.animate.set_color(BLUE), run_time=1)
self.wait(1)
'''
Example 5 (isosceles triangle with proper vertex positioning):
'''
from manim import *
class IsoscelesTriangleProperties(Scene):
def construct(self):
# Create isosceles triangle using Polygon
triangle = Polygon(
np.array([-1.5, -1, 0]),  # bottom left vertex (index 0)
np.array([0, 1.5, 0]),    # top vertex (index 1)
np.array([1.5, -1, 0])    # bottom right vertex (index 2)
)
    # Label the sides using get_vertices() for Polygon objects
    leg1_label = MathTex(r"\text{leg}").move_to(
        (triangle.get_vertices()[0] + triangle.get_vertices()[1]) / 2
    ).shift(LEFT * 0.3)
    leg2_label = MathTex(r"\text{leg}").move_to(
        (triangle.get_vertices()[1] + triangle.get_vertices()[2]) / 2
    ).shift(RIGHT * 0.3)
    base_label = MathTex(r"\text{base}").next_to(triangle, DOWN, buff=0.1)
    
    self.add(triangle, leg1_label, leg2_label, base_label)
    self.wait(3)
    
    # Animation 1: highlight equal sides
    self.play(
        leg1_label.animate.set_color(YELLOW),
        leg2_label.animate.set_color(YELLOW),
        run_time=2
    )
    self.wait(2)
'''
Example 6 (rectangle with proper corner positioning):
'''
from manim import *
class RectangleExample(Scene):
def construct(self):
# Create rectangle using Rectangle (can use get_corner)
rect = Rectangle(width=3, height=2)
    # Label corners using get_corner() for Rectangle objects
    ul_label = MathTex(r"\text{UL}").next_to(rect.get_corner(UL), UL, buff=0.1)
    ur_label = MathTex(r"\text{UR}").next_to(rect.get_corner(UR), UR, buff=0.1)
    dl_label = MathTex(r"\text{DL}").next_to(rect.get_corner(DL), DL, buff=0.1)
    dr_label = MathTex(r"\text{DR}").next_to(rect.get_corner(DR), DR, buff=0.1)
    
    self.add(rect, ul_label, ur_label, dl_label, dr_label)
    self.wait(2)
'''
*** END OF EXAMPLES ***
CRITICAL REMINDERS:

Polygon objects: Use get_vertices()[index] for vertex positioning
Rectangle/Square objects: Use get_corner(direction) for corner positioning
Every line must be syntactically complete with proper parentheses and commas
Always test positioning methods match the object type

Now write the code for the following scene:
```text
{scene_description_here}


Use Text() for:
Simple labels such as Area, Base, Angle, x‚ÇÅ, y‚ÇÇ, etc. Example: Text("Area")
Plain mathematical symbols in isolation such as +, √ó, √∑, =, a¬≤, b¬≤, 60¬∞. Example: Text("+"), Text("a¬≤")
Coordinate labels like (x‚ÇÅ, y‚ÇÅ). Example: Text("(x‚ÇÅ, y‚ÇÅ)")
Any text or annotation that does not require LaTeX formatting. Example: Text("Perimeter = a + a + b")
Labels inside objects like NumberLine (use label_constructor=Text). Example: NumberLine(..., label_constructor=Text)
Non-Latin text (Unicode, emoji, etc.). Example: Text("‰Ω†Â•Ω"), Text("üôÇ")

Use MathTex() for:
Complex mathematical expressions that require LaTeX formatting, such as:
Fractions like \frac{a}{b}. Example: MathTex(r"\frac{a}{b}")
Roots like \sqrt{a}. Example: MathTex(r"\sqrt{a}")
Exponents like a^{2}. Example: MathTex(r"a^{2}")
Equations like a^2 + b^2 = c^2. Example: MathTex(r"a^2 + b^2 = c^2")
Expressions using LaTeX macros such as \pi, \theta, \int, etc. Example: MathTex(r"\int_{0}^{1} x , dx = \frac{1}{2}")
Formulas where LaTeX spacing and layout are critical. Example: MathTex(r"\lim_{x \to 0} \frac{\sin x}{x} = 1")
Multiline equations using LaTeX environments. Example: MathTex(r"\begin{align*} a &= b + c \ d &= e + f \end{align*}")

Essential MathTex Syntax Rules:
Always use raw strings, for example MathTex(r"expression")
Escape LaTeX commands with double backslashes, for example MathTex(r"\frac{a}{b}"), MathTex(r"\sqrt{a}")
Use curly braces for grouping, for example MathTex(r"a^{2}"), MathTex(r"x_{1}")
Use double braces {{...}} to isolate parts for animations, for example MathTex(r"{{a^2}} + {{b^2}} = {{c^2}}")
Use \text{...} only within MathTex when mixing math and text, but prefer Text() for labels when possible. Example: MathTex(r"\text{Area} = \frac{1}{2}bh"), or better, Text("Area = ") and MathTex(r"\frac{1}{2}bh")
Import LaTeX packages via tex_template for complex math. For example:
tex_template = TexTemplate()
tex_template.add_to_preamble(r"\usepackage{amsmath}")

Common Pitfalls and Fixes:
Using MathTex() for plain words should be avoided; use Text() instead. Example: Text("Area") instead of MathTex(r"\text{Area}")
Using \text{} in MathTex without proper LaTeX context; use Text() or \mathrm{} instead. Example: MathTex(r"\mathrm{Area}") or Text("Area")
Forgetting raw strings or backslashes; always use r"" and double backslashes. Example: MathTex(r"\frac{a}{b}") not MathTex("\frac{a}{b}")
Not importing necessary packages like amsmath; add them via tex_template. Example: tex_template.add_to_preamble(r"\usepackage{amsmath}")
Overusing MathTex() for simple labels; use Text() for simple symbols and operators. Example: Text("+"), Text("=") instead of MathTex(r"+")